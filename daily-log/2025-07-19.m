本日の学習ログを作成します。質問内容も含めて詳細に記録しましょう。

Ran tool
本日の学習ログを作成します：

```markdown
# 2025-07-19 2週目4日目：新機能開発とブランチ戦略

## 今日のテーマ
複数ブランチでの並行開発・マージ競合解決

## 学習内容

### 1. 優先度機能ブランチ（feature/priority）の作成・開発
- **ブランチ作成**: `git checkout -b feature/priority`
- **実装内容**:
  - 優先度フィルタリング機能
  - 優先度アイコン（������）表示
  - メニューに優先度別表示を追加
- **コミット**: `git commit -m "優先度機能を強化: フィルタリング機能とアイコン表示を追加"`

### 2. 期限機能ブランチ（feature/due-date）の作成・開発
- **ブランチ作成**: `git checkout -b feature/due-date`
- **実装内容**:
  - 期限切れ警告機能
  - 期限別フィルタリング機能
  - 期限アイコン（��）と警告マーク（⚠️）を追加
  - 期限入力機能（YYYY-MM-DD形式）
- **コミット**: `git commit -m "期限機能を強化: 期限切れ警告、期限別フィルタリング機能を追加"`

### 3. 競合の発生と解決
- **競合発生**: 両ブランチをmainにマージ時に競合
- **競合箇所**: 選択肢3の処理部分
  - main: "3. 期限別タスク表示"
  - feature/priority: "3. 優先度別タスク表示"
- **解決方法**: 手動で競合を解決し、両機能を統合
- **統合結果**: 選択肢1-8の完全なメニュー

### 4. 統合された機能
- **選択肢1**: タスク追加（優先度・期限設定可能）
- **選択肢2**: タスク一覧表示（優先度アイコン・期限情報付き）
- **選択肢3**: 優先度別タスク表示
- **選択肢4**: 期限別タスク表示
- **選択肢5**: 期限切れタスク表示
- **選択肢6**: タスク完了
- **選択肢7**: タスク削除
- **選択肢8**: 終了

## 使用したGitコマンド
```bash
# ブランチ作成
git checkout -b feature/priority
git checkout -b feature/due-date

# 開発・コミット
git add src/main.py
git commit -m "優先度機能を強化: フィルタリング機能とアイコン表示を追加"
git commit -m "期限機能を強化: 期限切れ警告、期限別フィルタリング機能を追加"

# マージ・競合解決
git checkout main
git merge feature/priority  # 競合発生
git add src/main.py
git commit -m "競合解決: 優先度機能と期限機能を統合"

# リモートpush
git push origin main
```

## 質問と回答

### Q1: 競合の解決は管理者であるmainが実施するということ？
**A**: 競合解決は「マージを実行する人」が行う。個人開発では自分、チーム開発ではマージ担当者/レビュアーが解決する。

### Q2: これはコミット段階だからPRとは関係ない、その前の前段階の作業ってこと？
**A**: その通り。今日の学習は「ローカル開発段階」で、プルリクエストはまだ作成していない。リモートにpushした後が「リモート開発段階」。

### Q3: 統合したものをGitHub/リモートへpushするのはmain側になるの？
**A**: はい、統合されたmainブランチをpushする。`git push origin main`で統合結果をリモートに反映。

### Q4: チーム開発だと競合解決はリモート上でmain（管理者）がおこなるのか？
**A**: 競合解決はリモート（GitHub）上またはローカルで行う。マージ権限を持つ人（管理者/レビュアー）が責任を持つ。

### Q5: なぜ古いバージョンだったの？どこに残っていたの？再クローンの影響？
**A**: リモートリポジトリに複数バージョンが混在し、再クローン時にデフォルト版（古いバージョン）が取得された。統合版は別の場所に保存されていた。

### Q6: todo-appディレクトリの統合版を使用、これで5日目の学習は続けられ、gitリポジトリーへもpushできるか？
**A**: はい、完全に可能。`todo-app`ディレクトリには統合版が保存されており、5日目の学習継続とリモートpushが可能。

## 学んだこと

### 1. 並行開発の実践
- 2つの機能ブランチで同時に開発
- 独立した機能開発の体験
- ブランチ戦略の理解

### 2. 競合の発生メカニズム
- 同じファイルの同じ部分を異なる方法で変更
- マージ時の競合発生
- 競合マーカーの理解

### 3. 競合解決の実践
- 手動での競合解決
- 機能統合の考え方
- 統合後のテスト

### 4. Gitワークフローの体験
- ブランチ作成 → 開発 → マージ → 競合解決
- ローカル開発 vs リモート開発の違い
- チーム開発での役割分担

## 技術的成果
- ✅ 優先度機能の完全実装
- ✅ 期限機能の完全実装
- ✅ 両機能の統合
- ✅ 競合解決の実践
- ✅ 統合されたToDoアプリの完成

## 明日の予定
2週目5日目：リセット・リカバリ（誤ったコミットの修正・復元・ブランチ復元）

## 使用ディレクトリ
- **学習用**: `todo-app/` (統合版が保存されている)
- **リモート**: `cursor-todo-app/` (GitHubリポジトリ)

## 注意点
- ローカルフォルダ削除により履歴が分離
- 統合版は`todo-app`ディレクトリに保存
- 5日目の学習は`todo-app`ディレクトリで継続